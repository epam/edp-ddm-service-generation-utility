apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}-deployment
  labels:
    app: {{ .Values.name }}
    version: {{ .Values.version | squote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      {{- if or .Values.podAnnotations .Values.global.registry.soapApi.istio.sidecar.enabled }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- if .Values.global.registry.soapApi.istio.sidecar.enabled }}
        sidecar.istio.io/inject: 'true'
        {{- include "soapApi.istioResources" . | nindent 8 }}
        {{- end }}
      {{- end }}
      labels:
        app: {{ .Values.name }}
        version: {{ .Values.version | squote }}
    spec:
      serviceAccountName: {{ .Values.name }}
      imagePullSecrets:
        - name: {{ .Values.nexusPullSecret }}
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.image.name }}:{{ .Values.image.version }}"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.port }}
            failureThreshold: 1
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.port }}
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          {{- if not .Values.global.disableRequestsLimits }}
          resources:
            {{- toYaml .Values.global.registry.soapApi.container.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /app/config/config.yaml
              name: config
              readOnly: true
              subPath: config.yaml
            - mountPath: /app/secrets/keycloakserviceaccount
              name: {{ .Values.name }}-keycloak-serviceaccount-credentials
              readOnly: true
          env:
            {{- range $name, $value := .Values.global.registry.soapApi.container.envVars }}
            - name: {{ $name }}
              value: {{ $value | quote}}
            {{- end }}
            - name: KAFKA_USER_KEYSTORE_CERTIFICATE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.user }}
                  key: user.crt
            - name: KAFKA_USER_KEYSTORE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.user }}
                  key: user.key
            - name: KAFKA_CLUSTER_TRUSTSTORE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.clusterName }}-cluster-ca-cert
                  key: ca.crt
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: soap-api-properties
        - name: {{ .Values.name }}-keycloak-serviceaccount-credentials
          secret:
            secretName: {{ .Values.keycloak.serviceAccount.secretName }}
            items:
              - key: clientSecret
                path: keycloak.serviceAccount.clientSecret
