/*
 * Copyright 2021 EPAM Systems.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.digital.data.platform.generator.factory.impl;

import static java.util.stream.Collectors.toList;

import com.epam.digital.data.platform.generator.factory.CrudAbstractScope;
import com.epam.digital.data.platform.generator.metadata.AutoGeneratedValueProvider;
import com.epam.digital.data.platform.generator.model.Context;
import com.epam.digital.data.platform.generator.model.template.AutoGeneratedValueField;
import com.epam.digital.data.platform.generator.scope.CreateCommandHandlerScope;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;
import schemacrawler.schema.Table;

@Component
public class CreateCommandHandlerScopeFactory extends CrudAbstractScope<CreateCommandHandlerScope> {

  private static final String OPERATION = "create";

  AutoGeneratedValueProvider autoGeneratedValueProvider;

  public CreateCommandHandlerScopeFactory(AutoGeneratedValueProvider autoGeneratedValueProvider) {
    this.autoGeneratedValueProvider = autoGeneratedValueProvider;
  }

  @Override
  protected CreateCommandHandlerScope map(Table table, Context context) {
    String modelName = getSchemaName(table);

    var scope = new CreateCommandHandlerScope();

    scope.setClassName(modelName + StringUtils.capitalize(OPERATION) + "CommandHandler");
    scope.setSchemaName(modelName);
    scope.setProviderName(modelName + "TableDataProvider");
    scope.setOperation(OPERATION);
    var autoGeneratedValues = autoGeneratedValueProvider
        .findFor(getCutTableName(table));
    var fields = autoGeneratedValues.stream()
        .map(x -> new AutoGeneratedValueField(getPropertyName(x.getColumn()), x.getColumn(), x.getPattern()))
        .collect(toList());
    scope.setAutoGeneratedValueFields(fields);
    return scope;
  }

  @Override
  public String getPath() {
    return "kafka-api/src/main/java/kafkaapi/commandhandler/impl/createCommandHandler.java.ftl";
  }
}
